"-----------------------------------------------------------------------------------------------------------------------
"
" Vimrc - Vim Runcom/Run Commands (RC) File
"
" Author:           Brandon Perez <bmperez@alumni.cmu.edu>
" Creation Date:    Tuesday, September 03, 2013 at 4:54:31 PM EDT
"
" This file is executed when a new Vim session starts (typically when opening a file), and it sets up the settings,
" shortcuts, plugins, and abbreviations for the Vim session.
"
"-----------------------------------------------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------------------------------------------
" General Settings
"-----------------------------------------------------------------------------------------------------------------------

" Ensure that modern Vim mode is used, and Vim makes no attempt to be Vi backwards compatible.
set nocompatible

" Enable syntax highlighting, filetype detection, filetype specific indentation, and plugins.
syntax on
filetype indent plugin on

" Change the current working directory to be the parent directory of the current file being edited. This is enabled to
" make it easier to switch to other files in the same directory as the file being edited.
set autochdir

" Allow backspacing over the end of a line, automatic indentation, and the start of insert.
set backspace=eol,indent,start

" When pressing the tab key, insert spaces instead of a tab character, the number of which is given by soft tab stop.
set expandtab

" When performing a search, highlight all matching instances of the search term in the file. This highlight remains
" persistent until the next search or when it is explicitly disabled.
set hlsearch

" Make the Vim search behave like searching does in a web browser does. When a search command is typed, matches against
" the current search string are highlighted and updated as more of the command is typed.
set incsearch

" Show the line number for each line on the left-hand side of the Vim window.
set number

" Show information about the current cursor position in the bottom right of the Vim window. This includes the line
" number and character/column position of the cursor and the relative position in the overall file.
set ruler

" Set the default shell to Bash.
set shell=bash

" The number of spaces that are used for each step of manual or automatic indentation.
set shiftwidth=4

" Show the (normal-mode) command being typed in the last line of the screen.
set showcmd

" Highlight matching delimiters when the cursor is over one them (e.g braces, parenthesis, etc.).
set showmatch

" The number of spaces that are used when pressing the tab key. This also affects the behavior when pressing the
" backspace key, so it deletes the equivalent number of spaces when pressed.
set softtabstop=4

" When performing a horizontal or vertical split, open the window below or to the right of the current window.
set splitbelow
set splitright

" When using Ctags to search for identifiers, search for the tags file from the file's current directory, then all of
" its parent directories.
set tags=./tags;

" Update the title of the screen (terminal window) based on the file is being edited, setting it to its name.
set title

" When performing tab completion, complete the next full match and also start a wild menu if it is enabled. This updates
" the completion text to the next full match.
set wildmode=full

" When performing tab completion, list all available tab completions at the bottom of the screen. The available
" completions can be scrolled throw by pressed tab repeatedly.
set wildmenu

"-----------------------------------------------------------------------------------------------------------------------
" Color Settings
"-----------------------------------------------------------------------------------------------------------------------

" Ensure that the color scheme is always the default from Ubuntu 14.04.
colorscheme default

" Use the peach puff color scheme's color for highlighting searches. This looks much better for white text.
highlight Search        term=reverse ctermbg=3 guibg=Gold2

" Overwrite Vim's awful color scheme when using the Vim diff tool. This produces a much visually better looking diff.
highlight DiffAdd       ctermfg=White ctermbg=DarkGreen guifg=White guibg=DarkGreen
highlight DiffDelete    ctermfg=White ctermbg=DarkRed guifg=White guibg=DarkRed
highlight DiffChange    ctermfg=White ctermbg=DarkMagenta guifg=White guibg=DarkMagenta
highlight DiffText      ctermfg=White ctermbg=DarkBlue guifg=White guibg=DarkBlue

" When the color column is enabled, color it blue.
highlight ColorColumn   ctermbg=DarkBlue ctermfg=white guibg=#592929

"-----------------------------------------------------------------------------------------------------------------------
" Aliases, Commands, and Functions
"-----------------------------------------------------------------------------------------------------------------------

" Allow for capital letters for common commands.
command! WQ wq
command! Wq wq
command! W w
command! Q q

" Override the default Vexplore behavior to split right instead of left.
command! Vex Vexplore!

" A command that allows a shell command to be executed silently. Normally, VIM puts itself in the background, then
" leaves you in the shell.
command! -bar -nargs=* Sh execute ':silent !' . <q-args> | execute ':redraw!'

" Provide short aliases for spawning a BASH shell with ConqueTerm.
command! -bar Sbash ConqueTermSplit bash
command! -bar Vbash ConqueTermVSplit bash
command! -bar Bash ConqueTerm bash

" Sets up a command to be run when the file is saved, and clears the command.
command! -bar -nargs=* OnWrite autocmd BufWritePost * !<args>
command! -bar -nargs=* OnWriteSilent autocmd BufWritePost * Sh <args>
command! -bar OnWriteClear autocmd! BufWritePost

" Commands that remove trailing blank lines, collapse consecutive blank lines,
" and strip trailing whitespace.
command! -bar StripWhitespace execute 'normal! mz' | silent! %s/\s\+$//e | noh | normal! `z
command! -bar DeleteTrailingLines execute 'normal! mz' | silent! %s/\($\n\s*\)\+\%$//e | noh | silent! normal! `z
command! -bar SquashBlankLines execute 'normal! mz' | silent! %s/\(\s*\n\s*\n\)\(\s*\n\)\+/\1/e | noh |
        \ silent! normal! `z

" Function to set the default text width if it is not already specified.
function! SetDefaultTW()
    if &textwidth == 0 || &filetype == ""
        set textwidth=120
    endif
endfunction

" Function to set the over length marker to be 1 past the text width.
function! SetOverLength()
    if &textwidth != 0
        execute 'match OverLength /\%' . (&textwidth + 1) . 'v.\+/'
    endif
endfunction

"-----------------------------------------------------------------------------------------------------------------------
" General Auto Commands
"-----------------------------------------------------------------------------------------------------------------------

" Auto commands that deal with striping whitespace when saving files.
augroup StripWhitespace
    autocmd!

    autocmd BufWritePre * SquashBlankLines
    autocmd BufWritePre * DeleteTrailingLines
    autocmd BufWritePre * StripWhitespace
augroup END

" Auto commands that deal with line length restrictions.
augroup LineLength
    autocmd!

    " By default, the text width is 120 if not specified.
    autocmd BufRead,BufNewFile * call SetDefaultTW()

    " For C-like file types, the line length restriction is 80 characters.
    autocmd FileType c,cpp,python,rust,cuda,make,asm set textwidth=80

    " For ConqueTerm windows, there is no limit to the text width.
    autocmd FileType conque_term set textwidth=0
augroup END

" Highlight any characters past the line length limit in red.
highlight OverLength ctermbg=red ctermfg=white guibg=#592929

" Autocommands that enable spellchecks for markdown and git commit files.
augroup SpellCheck
    autocmd!
    autocmd FileType gitcommit,markdown setlocal spell spelllang=en_us
augroup END

"-----------------------------------------------------------------------------------------------------------------------
" Syntax Auto Commands
"-----------------------------------------------------------------------------------------------------------------------

" Autocommands that deal with changing settings for comments.
augroup LanguageComments
    autocmd!

    " Enable C style comments for C-like languages.
    autocmd FileType rust,cuda,c0,verilog_systemverilog setlocal formatoptions+=croql

    " Disable automatic extension of '//' style comments.
    autocmd FileType c,cpp,rust,cuda,c0,verilog_systemverilog setlocal comments-=:// comments+=f://
augroup END

" Auto commands that associate non-standard extensions with their corresponding file types.
" TODO: Move these to the after directory.
augroup FiletypeAssociations
    autocmd!

    " Associate 15-411 lab test files with the C0 filetype.
    autocmd BufRead,BufNewFile *.l1 *.l2 *.l3 *.l4 *.l5 *.l6 set filetype=c0

    " Associate configuration files with their closest language.
    autocmd BufRead,BufNewFile *.lalrpop set filetype=rust
    autocmd BufRead,BufNewFile *.json set filetype=javascript

    " Associate Arduino files to have C++ syntax highlighting.
    autocmd BufRead,BufNewFile *.ino set filetype=cpp

    " Associate Kbuild files with the Makefile filetype.
    autocmd BufRead,BufNewFile Kbuild set filetype=make
augroup END

"-----------------------------------------------------------------------------------------------------------------------
" Keyboard Shortcuts
"-----------------------------------------------------------------------------------------------------------------------

" Sets up the leader character to be a comma.
let mapleader = ","
let g:mapleader = ","

" A quick shortcut to duplicate a single line.
nnoremap Y yyp

" Shortcuts for saving the file and closing the file from insert mode.
inoremap <leader>w <ESC>:w<CR>i
inoremap <leader>q <ESC>:q<CR>
inoremap <leader>wq <ESC>:wq<CR>

" Provide versions of cut and delete in normal and visual modes that don't yank
" the elements. These disable yank by using the black hole register.
nnoremap <silent> <leader>d "_d
nnoremap <silent> <leader>D "_d
nnoremap <silent> <leader>c "_c
nnoremap <silent> <leader>C "_C
vnoremap <silent> <leader>d "_d
vnoremap <silent> <leader>D "_D
vnoremap <silent> <leader>c "_c
vnoremap <silent> <leader>C "_C

" Override the default behavior of the <Del> key, and prevent it from
" automatically yanking the text it deletes.
noremap <silent> <Del> "_x

" Override the default behavior of the paste command in visual mode. Instead
" of yanking the selection that was pasted over, simply delete it.
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction
vnoremap <silent> <expr> p <sid>Repl()
vnoremap <silent> <expr> P <sid>Repl()

" Shortcuts to toggle paste mode and spellcheck.
set pastetoggle=<F2>
noremap <F3> :setlocal spell! spelllang=en_us<CR>
inoremap <F3> :setlocal spell! spelllang=en_us<CR>

" Quick shortcuts to disable and enable highlighting overlength lines
noremap <F4> :call SetOverLength()<CR>
inoremap <F4> :call SetOverLength()<CR>
noremap <F5> :match none<CR>
inoremap <F5> :match none<CR>

" Quick shortcut to disable highlighting over length lines.
noremap <F8> :match none<CR>

" Window navigation shortcuts with Alt and the arrow keys.
map <silent> <A-Up> :wincmd k<CR>
map <silent> <A-Down> :wincmd j<CR>
map <silent> <A-Left> :wincmd h<CR>
map <silent> <A-Right> :wincmd l<CR>

"-----------------------------------------------------------------------------------------------------------------------
" Insert Mode Text Expansions (Macros)
"-----------------------------------------------------------------------------------------------------------------------

" Shortcuts to insert dates, timestamps, and human-readable timestamps.
iabbrev <expr> _dts strftime("%c")
iabbrev <expr> _hdts strftime("%A, %B %d, %Y at %r %Z")
iabbrev <expr> _ds strftime("%b %d, %Y")

" Shortcut to insert a header gaurd
function! Header_Gaurd()
    let basename = toupper(fnamemodify(bufname("%"), ":t:r"))
    let extension = toupper(fnamemodify(bufname("%"), ":e"))
    let gaurd = basename . "_" . extension . "_"
    return  "#ifndef " . gaurd . "" .
           \"#define " . gaurd . "" .
           \"" .
           \"#endif /* " . gaurd . " */"
endfunction
iabbrev <expr> _hdgd Header_Gaurd()

" Shortcut to insert a generic comment header for various languages.
iabbrev <expr> _hd "" .
    \"/*----------------------------------------------------------------------------<CR>" .
    \"<CR>" .
    \"<BS>----------------------------------------------------------------------------*/<CR>"
iabbrev <expr> _shhd "" .
    \"#-------------------------------------------------------------------------------<CR>" .
    \"#<CR>" .
    \"#-------------------------------------------------------------------------------<CR>"
iabbrev <expr> _shhd_bold "" .
    \ "################################################################################<CR>" .
    \ "#<CR>" .
    \ "################################################################################<CR>"

" Shortcut to insert Doxygen doc string in a file.
iabbrev <expr> _dxhd "" .
    \"/**<CR>" .
    \"@file " . fnamemodify(bufname("%"), ":t") . "<CR>" .
    \"@author Brandon Perez <bmperez@alumni.cmu.edu><CR>" .
    \"@date " . strftime("%A, %B %d, %Y at %r %Z") . "<CR>" .
    \"<CR>" .
    \"FIXME: Insert a short description here<CR>" .
    \"<CR>" .
    \"FIXME: Insert a longer description here<CR>" .
    \"<BS>*/"

" Shortcut to insert a Doxygen doc string for functions.
iabbrev <expr> _dxf "" .
    \"/**<CR>" .
    \"FIXME: Insert a brief description here.<CR>" .
    \"<CR>" .
    \"FIXME: Insert a longer description here.<CR>" .
    \"<CR>" .
    \"@param[in] var_name FIXME: Description of input parameter `var_name`<CR>" .
    \"<CR>" .
    \"@param[out] var_name FIXME: Description of output parameter `var_name`<CR>" .
    \"<CR>" .
    \"@return FIXME: Description of function's return value<CR>" .
    \"<BS>*/"

" Shortcut to insert a Sphinx documentation string in a file.
iabbrev <expr> _sxhd "" .
    \"\"\"\"<CR>" .
    \fnamemodify(bufname("%"), ":t") . "<CR>" .
    \".. module:: " . fnamemodify(bufname("%"), ":t:r") . "<CR>" .
    \"<CR>" .
    \".. moduleauthor:: Brandon Perez <bmperez@alumni.cmu.edu><CR>" .
    \".. date:: " . strftime("%A, %B %d, %Y at %r %Z") . "<CR>" .
    \"<CR>" .
    \"FIXME: Insert Brief Description Here<CR>" .
    \"<CR>" .
    \"FIXME: Insert Longer Description Here<CR>" .
    \"\"\"\"<CR>"

"-----------------------------------------------------------------------------------------------------------------------
" External Plugin Settings
"-----------------------------------------------------------------------------------------------------------------------

" ConqueTerm is a program that allows you to run shells and REPL's inside vim
" When entering a shell buffer, automatically go to insert mode, allow for
" CTRL-W to switch out of a ConqueTerm instance, and continue text output even
" when the focus is not on the ConqueTerm buffer.
let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_CWInsert = 1
let g:ConqueTerm_ReadUnfocused = 1
