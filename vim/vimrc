"-----------------------------------------------------------------------------------------------------------------------
"
" Vimrc - Vim Runcom/Run Commands (RC) File
"
" Author:           Brandon Perez <bmperez@alumni.cmu.edu>
" Creation Date:    Tuesday, September 03, 2013 at 4:54:31 PM EDT
"
" This file is executed when a new Vim session starts (typically when opening a file), and it sets up the settings,
" shortcuts, plugins, and abbreviations for the Vim session.
"
" This file contains the general settings for Vim. For plugin settings, see plugins.vim. For language/file type specific
" settings, see the after directory.
"
"-----------------------------------------------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------------------------------------------
" General Variables
"-----------------------------------------------------------------------------------------------------------------------

" The directory where this Vimrc file is located. The expression handles symbolic links and gives an absolute path.
let g:vim_directory         = fnamemodify(resolve(expand('<sfile>:p')), ':h')

"-----------------------------------------------------------------------------------------------------------------------
" Plugins
"-----------------------------------------------------------------------------------------------------------------------

" Source the installed and used plugins for Vim. Note that this must come first, because it resets syntax settings.
execute 'source ' . g:vim_directory . '/plugins.vim'

"-----------------------------------------------------------------------------------------------------------------------
" Vim Options
"-----------------------------------------------------------------------------------------------------------------------

" Ensure that modern Vim mode is used, and Vim makes no attempt to be Vi backwards compatible.
setglobal nocompatible

" Enable syntax highlighting, file type detection, file type specific indentation, and plugins.
syntax on
filetype indent plugin on

" Change the current working directory to be the parent directory of the current file being edited. This is enabled to
" make it easier to switch to other files in the same directory as the file being edited.
setglobal autochdir

" Allow backspacing over the end of a line, automatic indentation, and the start of insert.
setglobal backspace="eol,indent,start"

" Prevent Vim from making any annoying bell sounds.
setglobal belloff=all

" Change the directory where Vim's backup files are stored. These are created by Vim when it opens a file. This changes
" it from the default of the current working directory, which helps keep the working directory clean. Note that the
" trailing '//' the file names are unique, by including the full path in the name.
let &g:backupdir        = g:vim_directory . '/editor_files/backup_files//'

" Change the directory where Vim's swap files are stored. These are created by Vim when it opens a file.
let &g:directory        = g:vim_directory . '/editor_files/swap_files//'

" When pressing the tab key, insert spaces instead of a tab character, the number of which is given by soft tab stop.
set expandtab

" When performing a search, highlight all matching instances of the search term in the file. This highlight remains
" persistent until the next search or when it is explicitly disabled.
setglobal hlsearch

" Make the Vim search behave like searching does in a web browser does. When a search command is typed, matches against
" the current search string are highlighted and updated as more of the command is typed.
setglobal incsearch

" Show the line number for each line on the left-hand side of the Vim window.
set number

" Show information about the current cursor position in the bottom right of the Vim window. This includes the line
" number and character/column position of the cursor and the relative position in the overall file.
setglobal ruler

" Set the default shell to Bash.
setglobal shell=bash

" The number of spaces that are used for each step of manual or automatic indentation.
set shiftwidth=4

" Show the (normal-mode) command being typed in the last line of the screen.
setglobal showcmd

" Highlight matching delimiters when the cursor is over one them (e.g braces, parenthesis, etc.).
setglobal showmatch

" The number of spaces that are used when pressing the tab key. This also affects the behavior when pressing the
" backspace key, so it deletes the equivalent number of spaces when pressed.
set softtabstop=4

" When performing a horizontal or vertical split, open the window below or to the right of the current window.
setglobal splitbelow
setglobal splitright

" When using Ctags to search for identifiers, search for the tags file from the file's current directory, then all of
" its parent directories.
setglobal tags=./tags;

" Update the title of the screen (terminal window) based on the file is being edited, setting it to its name.
setglobal title

" Change the directory where Vim's undo files are stored. These are created when Vim needs to track the undo history.
let &g:undodir          = g:vim_directory . '/editor_files/undo_files//'

" Enable the saving of the undo history to file in the undo directory. This allows the undo history to persist across
" session (the undo history is restored when the file is reopened.
set undofile

" Change the directory where Vim's view files are stored. This is the same directory as other Vim-generated files.
let &g:viewdir          = g:vim_directory . '/editor_files/view_files//'

" Set the items to track when saving a view. This saves the cursor positions and any folds in the file. Notably,
" 'options' are not saved as this can cause several issues.
set viewoptions="cursor,folds"

" The list of file patterns to ignore when completing file or directory names. This adds the list of ignore patterns
" defined by the Bashrc to Vim's standard list of ignores. Note that this also affects globbing functions.
let s:wildignore_list   = substitute($TEXT_IGNORE_LIST, ' ', ',', 'g')
let &g:wildignore       .= s:wildignore_list

" When completing file or directory names, the case of the name is ignored when selected a match.
setglobal wildignorecase

" When performing tab completion, complete the next full match and also start a wild menu if it is enabled. This updates
" the completion text to the next full match.
setglobal wildmode=full

" When performing tab completion, list all available tab completions at the bottom of the screen. The available
" completions can be scrolled throw by pressed tab repeatedly.
setglobal wildmenu

"-----------------------------------------------------------------------------------------------------------------------
" Vim Settings
"-----------------------------------------------------------------------------------------------------------------------

" Set the default Shell file type to be Bash. Vim treats all shell files under a generic Shell file type. Thus, when a
" shell file with an unknown type is encountered, a default must be used.
let g:is_bash                   = 1

"-----------------------------------------------------------------------------------------------------------------------
" Custom Settings
"-----------------------------------------------------------------------------------------------------------------------

" The default text width to use for files. This is used if the file type doesn't define a text width.
let g:default_text_width        = 120

" By default, perform whitespace cleanup (stripping trailing whitespace, deleting consecutive blank lines, etc.) on all
" files. This is inherited by the buffer-local variable, which can be overridden by specific file types.
let g:enable_whitespace_cleanup = 1

"-----------------------------------------------------------------------------------------------------------------------
" Color Settings
"-----------------------------------------------------------------------------------------------------------------------

" Ensure that the color scheme is always the default from Ubuntu 14.04.
colorscheme default

" Use the peach puff color scheme's color for highlighting searches. This looks much better for white text.
highlight Search        term=reverse ctermbg=3 guibg=Gold2

" Overwrite Vim's awful color scheme when using the Vim diff tool. This produces a much visually better looking diff.
highlight DiffAdd       ctermfg=White ctermbg=DarkGreen guifg=White guibg=DarkGreen
highlight DiffDelete    ctermfg=White ctermbg=DarkRed guifg=White guibg=DarkRed
highlight DiffChange    ctermfg=White ctermbg=DarkMagenta guifg=White guibg=DarkMagenta
highlight DiffText      ctermfg=White ctermbg=DarkBlue guifg=White guibg=DarkBlue

" When the color column is enabled, color it blue.
highlight ColorColumn   ctermbg=DarkBlue ctermfg=white guibg=#592929

" When the over length highlight group is enabled, color it in red. This highlights any characters over the text width.
highlight OverLength    ctermbg=red ctermfg=white guibg=#592929

"-----------------------------------------------------------------------------------------------------------------------
" Functions
"-----------------------------------------------------------------------------------------------------------------------

" Function to set the over length marker to be 1 past the text width.
function! HighlightOverLength()
    if &textwidth != 0
        execute 'match OverLength /\%' . (&textwidth + 1) . 'v.\+/'
    endif
endfunction

" Function to set the default text width if it is not already specified.
function! SetDefaultTextWidth()
    if (&textwidth == 0) || (&filetype == "")
        let &l:textwidth = g:default_text_width
    endif
endfunction

" Performs a search and replace with the given search and replace string. This function ensures the cursor position is
" preserved (when possible) and disables highlighting for the search.
function! SearchAndReplace(regex)
    " Save the cursor position (and view) from before the search and replace operation.
    let l:old_view = winsaveview()

    " Perform the search and replace, and disable any highlighting.
    silent! execute a:regex
    nohlsearch

    " Return the cursor to its previous position (and restore the view) from before the operation, if possible.
    call winrestview(l:old_view)
endfunction

" Squashes any set of 2 or more consecutive blank lines into a single blank line.
function! SquashConsecutiveBlankLines()
    if b:enable_whitespace_cleanup
        call SearchAndReplace('%s/\(\s*\n\s*\n\)\(\s*\n\)\+/\1/e')
    endif
endfunction

" Strips any blank lines from the end of file, deleting them.
function! StripTrailingLines()
    if b:enable_whitespace_cleanup
        call SearchAndReplace('%s/\($\n\s*\)\+\%$//e')
    endif
endfunction

" Strips the trailing whitespace the end of any lines.
function! StripTrailingWhitespace()
    if b:enable_whitespace_cleanup
        call SearchAndReplace('%s/\s\+$//e')
    endif
endfunction

"-----------------------------------------------------------------------------------------------------------------------
" Aliases and Commands
"-----------------------------------------------------------------------------------------------------------------------

" Allow for capital letters for common commands.
command! WQ wq
command! Wq wq
command! W w
command! Q q

" Override the default Netrw explore command command behavior to split right and below instead of left and above.
command! Sex Sexplore
command! Vex Vexplore!

" A command that allows a shell command to be executed silently. Normally, VIM puts itself in the background, then
" leaves you in the shell.
command! -bar -nargs=* Sh execute ':silent !' . <q-args> | execute ':redraw!'

" Provide short aliases for spawning a Bash shell.
command! -bar Sbash terminal ++noclose bash
command! -bar Vbash vertical terminal ++noclose bash
command! -bar Bash terminal ++noclose ++curwin bash

" Sets up a command to be run when the file is saved, and clears the command.
command! -bar -nargs=* OnWrite autocmd BufWritePost * !<args>
command! -bar -nargs=* OnWriteSilent autocmd BufWritePost * Sh <args>
command! -bar OnWriteClear autocmd! BufWritePost

" Alias the functions for whitespace cleanup as commands, so they can be more easily invoked.
command! -bar StripTrailingWhitespace call StripTrailingWhitespace()
command! -bar StripTrailingLines call StripTrailingLines()
command! -bar SquashConsecutiveBlankLines call SquashConsecutiveBlankLines()

"-----------------------------------------------------------------------------------------------------------------------
" General Auto Commands
"-----------------------------------------------------------------------------------------------------------------------

" Set any buffer local variables to the values from their global variable counterparts.
augroup BufferLocalVariables
    autocmd!

    autocmd BufNewFile,BufReadPre * let b:enable_whitespace_cleanup = g:enable_whitespace_cleanup
augroup END

" Auto commands that deal with cleaning up extraneous whitespace in files. By default, all of the whitespace specified
" is cleaned up, but this can be disabled on a per-buffer basis by setting b:enable_whitespace_cleanup to 0.
augroup WhitespaceCleanup
    autocmd!

    autocmd BufWritePre * StripTrailingLines
    autocmd BufWritePre * StripTrailingWhitespace
    autocmd BufWritePre * SquashConsecutiveBlankLines
augroup END

" Auto commands that deal with automatically saving views and loading them from file for each buffer. Views store
" editor context information about the file such as the cursor position and any folds. Note that the '?*' pattern is
" used to prevent empty file names from being matched, since views cause an error for empty windows and help pages.
augroup SaveViews
    autocmd!

    autocmd BufWinLeave ?* mkview
    autocmd BufWinEnter ?* silent loadview
augroup END

" Auto commands that deal with Vim's text width property. By default, if a the filetype plugin does not specify a text
" width, it is set to g:default_text_width.
augroup TextWidth
    autocmd!

    autocmd BufRead,BufNewFile * call SetDefaultTextWidth()
augroup END

"-----------------------------------------------------------------------------------------------------------------------
" Syntax Auto Commands
"-----------------------------------------------------------------------------------------------------------------------

" Auto commands that deal with changing settings for comments.
augroup LanguageComments
    autocmd!

    " Enable C style comments for C-like languages.
    autocmd FileType rust,cuda,c0,verilog_systemverilog setlocal formatoptions+=croql

    " Disable automatic extension of '//' style comments.
    autocmd FileType c,cpp,rust,cuda,c0,verilog_systemverilog setlocal comments-=:// comments+=f://
augroup END

"-----------------------------------------------------------------------------------------------------------------------
" Keyboard Shortcuts
"-----------------------------------------------------------------------------------------------------------------------

" Sets up the leader character to be a comma.
let mapleader = ","
let g:mapleader = ","

" A quick shortcut to duplicate a single line.
nnoremap Y yyp

" Shortcuts for saving the file and closing the file from insert mode.
inoremap <leader>w <ESC>:w<CR>i
inoremap <leader>q <ESC>:q<CR>
inoremap <leader>wq <ESC>:wq<CR>

" Provide versions of cut and delete in normal and visual modes that don't yank
" the elements. These disable yank by using the black hole register.
nnoremap <silent> <leader>d "_d
nnoremap <silent> <leader>D "_d
nnoremap <silent> <leader>c "_c
nnoremap <silent> <leader>C "_C
vnoremap <silent> <leader>d "_d
vnoremap <silent> <leader>D "_D
vnoremap <silent> <leader>c "_c
vnoremap <silent> <leader>C "_C

" Override the default behavior of the <Del> key, and prevent it from
" automatically yanking the text it deletes.
noremap <silent> <Del> "_x

" Override the default behavior of the paste command in visual mode. Instead
" of yanking the selection that was pasted over, simply delete it.
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction
vnoremap <silent> <expr> p <sid>Repl()
vnoremap <silent> <expr> P <sid>Repl()

" Shortcuts to toggle paste mode and spellcheck.
set pastetoggle=<F2>
noremap <F3> :setlocal spell! spelllang=en_us<CR>
inoremap <F3> :setlocal spell! spelllang=en_us<CR>

" Quick shortcuts to disable and enable highlighting over length lines.
noremap <F4> :call HighlightOverLength()<CR>
inoremap <F4> :call HighlightOverLength()<CR>
noremap <F5> :match none<CR>
inoremap <F5> :match none<CR>

" Quick shortcut to disable highlighting over length lines.
noremap <F8> :match none<CR>

" Window navigation shortcuts with Alt and the arrow keys.
map <silent> <A-Up> :wincmd k<CR>
map <silent> <A-Down> :wincmd j<CR>
map <silent> <A-Left> :wincmd h<CR>
map <silent> <A-Right> :wincmd l<CR>

"-----------------------------------------------------------------------------------------------------------------------
" Insert Mode Text Expansions (Macros)
"-----------------------------------------------------------------------------------------------------------------------

" Shortcuts to insert dates, timestamps, and human-readable timestamps.
iabbrev <expr> _dts strftime("%c")
iabbrev <expr> _hdts strftime("%A, %B %d, %Y at %r %Z")
iabbrev <expr> _ds strftime("%b %d, %Y")

" Shortcut to insert a header guard.
function! Header_Gaurd()
    let basename = toupper(fnamemodify(bufname("%"), ":t:r"))
    let extension = toupper(fnamemodify(bufname("%"), ":e"))
    let gaurd = basename . "_" . extension . "_"
    return  "#ifndef " . gaurd . "" .
           \"#define " . gaurd . "" .
           \"" .
           \"#endif /* " . gaurd . " */"
endfunction
iabbrev <expr> _hdgd Header_Gaurd()

" Shortcut to insert a generic comment header for various languages.
iabbrev <expr> _hd "" .
    \"/*----------------------------------------------------------------------------<CR>" .
    \"<CR>" .
    \"<BS>----------------------------------------------------------------------------*/<CR>"
iabbrev <expr> _shhd "" .
    \"#-------------------------------------------------------------------------------<CR>" .
    \"#<CR>" .
    \"#-------------------------------------------------------------------------------<CR>"
iabbrev <expr> _shhd_bold "" .
    \ "################################################################################<CR>" .
    \ "#<CR>" .
    \ "################################################################################<CR>"

" Shortcut to insert Doxygen doc string in a file.
iabbrev <expr> _dxhd "" .
    \"/**<CR>" .
    \"@file " . fnamemodify(bufname("%"), ":t") . "<CR>" .
    \"@author Brandon Perez <bmperez@alumni.cmu.edu><CR>" .
    \"@date " . strftime("%A, %B %d, %Y at %r %Z") . "<CR>" .
    \"<CR>" .
    \"FIXME: Insert a short description here<CR>" .
    \"<CR>" .
    \"FIXME: Insert a longer description here<CR>" .
    \"<BS>*/"

" Shortcut to insert a Doxygen doc string for functions.
iabbrev <expr> _dxf "" .
    \"/**<CR>" .
    \"FIXME: Insert a brief description here.<CR>" .
    \"<CR>" .
    \"FIXME: Insert a longer description here.<CR>" .
    \"<CR>" .
    \"@param[in] var_name FIXME: Description of input parameter `var_name`<CR>" .
    \"<CR>" .
    \"@param[out] var_name FIXME: Description of output parameter `var_name`<CR>" .
    \"<CR>" .
    \"@return FIXME: Description of function's return value<CR>" .
    \"<BS>*/"

" Shortcut to insert a Sphinx documentation string in a file.
iabbrev <expr> _sxhd "" .
    \"\"\"\"<CR>" .
    \fnamemodify(bufname("%"), ":t") . "<CR>" .
    \".. module:: " . fnamemodify(bufname("%"), ":t:r") . "<CR>" .
    \"<CR>" .
    \".. moduleauthor:: Brandon Perez <bmperez@alumni.cmu.edu><CR>" .
    \".. date:: " . strftime("%A, %B %d, %Y at %r %Z") . "<CR>" .
    \"<CR>" .
    \"FIXME: Insert Brief Description Here<CR>" .
    \"<CR>" .
    \"FIXME: Insert Longer Description Here<CR>" .
    \"\"\"\"<CR>"

"-----------------------------------------------------------------------------------------------------------------------
" Setup Operations
"-----------------------------------------------------------------------------------------------------------------------

" If the directories for the backup, swap, and undo files do not exist, then create them.
for s:directory in [&backupdir, &directory, &undodir, &viewdir]
    if empty(glob(s:directory))
        execute 'silent !mkdir --parents ' . s:directory
    endif
endfor

"-----------------------------------------------------------------------------------------------------------------------
" Local Machine-Specific Settings
"-----------------------------------------------------------------------------------------------------------------------

" Source any local, machine-specific settings if there is a Vim file for it.
let s:local_vimrc = g:vim_directory . '/vimrc_local.vim'
if !empty(glob(s:local_vimrc))
    execute 'source ' . s:local_vimrc
endif
