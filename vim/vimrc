"-----------------------------------------------------------------------------------------------------------------------
"
" Vimrc - Vim Runcom/Run Commands (RC) File
"
" Author:           Brandon Perez <bmperez@alumni.cmu.edu>
" Creation Date:    Tuesday, September 03, 2013 at 4:54:31 PM EDT
"
" Description:
"   This file is executed when a new Vim session starts (typically when opening a file), and it sets up the settings,
"   shortcuts, plugins, and abbreviations for the Vim session.
"
"   This file contains the general settings for Vim. For plugin settings, see plugins.vim. For language/file type
"   specific settings, see the after directory.
"
"-----------------------------------------------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------------------------------------------
" General Variables
"-----------------------------------------------------------------------------------------------------------------------

" The user's name. This is used when generating header comments for files.
let g:user_name     = 'Brandon Perez'

" The user's email. This is used when generating header comments for file.
let g:user_email    = 'bmperez@alumni.cmu.edu'

" The directory where this Vimrc file is located. The expression handles symbolic links and gives an absolute path.
let g:vim_directory = fnamemodify(resolve(expand('<sfile>:p')), ':h')

"-----------------------------------------------------------------------------------------------------------------------
" Plugins
"-----------------------------------------------------------------------------------------------------------------------

" Source the installed and used plugins for Vim. Note that this must come first, because it resets syntax settings.
execute 'source ' . g:vim_directory . '/plugins.vim'

"-----------------------------------------------------------------------------------------------------------------------
" Vim Options
"-----------------------------------------------------------------------------------------------------------------------

" Ensure that modern Vim mode is used, and Vim makes no attempt to be Vi backwards compatible.
set nocompatible

" Enable syntax highlighting, file type detection, file type specific indentation, and plugins.
filetype on
filetype indent on
filetype plugin on
syntax on

" Change the current working directory to be the parent directory of the current file being edited. This is enabled to
" make it easier to switch to other files in the same directory as the file being edited.
set autochdir

" When starting a new line, use the indentation from the previous line to determine where the next line will start. Note
" that this is a fallback setting, any language-specific indentation settings will take priority over it.
set autoindent

" Allow backspacing over the end of a line, automatic indentation, and the start of insert.
set backspace=eol,indent,start

" Prevent Vim from making any annoying bell sounds.
set belloff=all

" Change the directory where Vim's backup files are stored. These are created by Vim when it opens a file. This changes
" it from the default of the current working directory, which helps keep the working directory clean. Note that the
" trailing '//' the file names are unique, by including the full path in the name.
let &backupdir          = g:vim_directory . '/editor_files/backup_files//'

" Change the directory where Vim's swap files are stored. These are created by Vim when it opens a file.
let &directory          = g:vim_directory . '/editor_files/swap_files//'

" When pressing the tab key, insert spaces instead of a tab character, the number of which is given by soft tab stop.
set expandtab

" When opening a file, open all potential folds in a file, rather than having them be closed initially by default.
set nofoldenable

" Enable text folding in Vim and use syntax as the method to create the folds, based on the language. This can be
" overridden locally for particular languages.
set foldmethod=syntax

" Set the number of commands and previous search patterns remembered by Vim in the history to the maximum value.
set history=10000

" When performing a search, highlight all matching instances of the search term in the file. This highlight remains
" persistent until the next search or when it is explicitly disabled.
set hlsearch

" Treats all search patterns as case-insensitive. This works with the smart case option to enable it for searches.
set ignorecase

" Make the Vim search behave like searching does in a web browser does. When a search command is typed, matches against
" the current search string are highlighted and updated as more of the command is typed.
set incsearch

" Enable the displaying of indicator characters for various types of whitespace characters and in certain situations.
" Specifically, use '«' and '»' to indicate that a line continues further to left or right, respectively, when line
" wrapping  is disabled. Use '·' to display trailing whitespace characters and use '▸' to indicate where a tab character
" starts and use '·' to indicate the whitespace that it fills. Use '␣' to mark non-breakable space characters.
set list
let &listchars          = 'extends:»,nbsp:␣,trail:·,precedes:«,tab:▸·'

" Show the line number for each line on the left-hand side of the Vim window.
set number

" Show information about the current cursor position in the bottom right of the Vim window. This includes the line
" number and character/column position of the cursor and the relative position in the overall file.
set ruler

" Set the default shell to Bash.
set shell=bash

" The number of spaces that are used for each step of manual or automatic indentation.
set shiftwidth=4

" Set the string that precedes the start of lines that have been wrapped (i.e. logical lines, not physical ones). This
" adds a marker and indents the lines by 8 characters to make it clear that they are wrapped.
let &showbreak          = '↳       '

" Show the (normal-mode) command being typed in the last line of the screen.
set showcmd

" Highlight matching delimiters when the cursor is over one them (e.g braces, parenthesis, etc.).
set showmatch

" Enables smart case for searches. If the search pattern is all lowercase letters, then it is treated as
" case-insensitive. Otherwise, it is treated as case-sensitive. Requires the ignore case option. Case sensitivity can be
" forced by specifying \C in the pattern.
set smartcase

" The number of spaces that are used when pressing the tab key. This also affects the behavior when pressing the
" backspace key, so it deletes the equivalent number of spaces when pressed.
set softtabstop=4

" When performing a horizontal or vertical split, open the window below or to the right of the current window.
set splitbelow
set splitright

" The number of spaces used for tab characters. This is used when tabs are used for indentation (e.g. Makefiles).
set tabstop=4

" When using Ctags to search for identifiers, search for the tags file from the file's current directory, then all of
" its parent directories.
set tags=./tags;

" Update the title of the screen (terminal window) based on the file is being edited, setting it to its name.
set title

" Change the directory where Vim's undo files are stored. These are created when Vim needs to track the undo history.
let &undodir            = g:vim_directory . '/editor_files/undo_files//'

" Enable the saving of the undo history to file in the undo directory. This allows the undo history to persist across
" session (the undo history is restored when the file is reopened.
set undofile

" Change the directory where Vim's view files are stored. This is the same directory as other Vim-generated files.
let &viewdir            = g:vim_directory . '/editor_files/view_files//'

" Set the items to track when saving a view. This saves the cursor positions and any folds in the file. Notably,
" 'options' are not saved as this can cause several issues.
set viewoptions=cursor,folds

" The list of file patterns to ignore when completing file or directory names. This adds the list of ignore patterns
" defined by the Bashrc to Vim's standard list of ignores. Note that this also affects globbing functions.
let s:wildignore_list   = substitute($TEXT_IGNORE_LIST, ' ', ',', 'g')
let &wildignore         .= s:wildignore_list

" When completing file or directory names, the case of the name is ignored when selected a match.
set wildignorecase

" When performing tab completion, complete the next full match and also start a wild menu if it is enabled. This updates
" the completion text to the next full match.
set wildmode=full

" When performing tab completion, list all available tab completions at the bottom of the screen. The available
" completions can be scrolled throw by pressed tab repeatedly.
set wildmenu

" The number of milliseconds after nothing is typed to save the swap file to disk. This is used by the Git gutter plugin
" to control how often the status of lines are updated. This is reduced to 100 ms.
set updatetime=100

"-----------------------------------------------------------------------------------------------------------------------
" Vim Settings
"-----------------------------------------------------------------------------------------------------------------------

" Set the default Shell file type to be Bash. Vim treats all shell files under a generic Shell file type. Thus, when a
" shell file with an unknown type is encountered, a default must be used.
let g:is_bash                   = 1

"-----------------------------------------------------------------------------------------------------------------------
" Custom Settings
"-----------------------------------------------------------------------------------------------------------------------

" The default text width to use for files. This is used if the file type doesn't define a text width.
let g:default_text_width        = 120

" By default, perform whitespace cleanup (stripping trailing whitespace, deleting consecutive blank lines, etc.) on all
" files. This is inherited by the buffer-local variable, which can be overridden by specific file types.
let g:enable_whitespace_cleanup = 1

"-----------------------------------------------------------------------------------------------------------------------
" Color Settings
"-----------------------------------------------------------------------------------------------------------------------

" Ensure that the color scheme is always the default from Ubuntu 14.04.
colorscheme default

" Use the peach puff color scheme's color for highlighting searches. This looks much better for white text.
highlight Search        term=reverse ctermbg=3 guibg=Gold2

" Overwrite Vim's awful color scheme when using the Vim diff tool. This produces a much visually better looking diff.
highlight DiffAdd       ctermfg=White ctermbg=DarkGreen guifg=White guibg=DarkGreen
highlight DiffDelete    ctermfg=White ctermbg=DarkRed guifg=White guibg=DarkRed
highlight DiffChange    ctermfg=White ctermbg=DarkMagenta guifg=White guibg=DarkMagenta
highlight DiffText      ctermfg=White ctermbg=DarkBlue guifg=White guibg=DarkBlue

" When the color column is enabled, color it blue.
highlight ColorColumn   ctermbg=DarkBlue ctermfg=white guibg=#592929

" When the over length highlight group is enabled, color it in red. This highlights any characters over the text width.
highlight OverLength    ctermbg=red ctermfg=white guibg=#592929

"-----------------------------------------------------------------------------------------------------------------------
" Functions
"-----------------------------------------------------------------------------------------------------------------------

" Toggles if portions of any lines that exceed the current text width are highlighted in red. If the current buffer does
" not have a text width defined, then no highlighting is performed.
function! ToggleOverLength() abort
    " If the match ID variable isn't defined yet, define it.
    if !exists('w:overlength_match_id')
        let w:overlength_match_id = -1
    endif

    " The pattern used to match portions of a line that exceed the text width.
    let l:match_pattern = '\v' . '%' . (&textwidth + 1) . 'v.+'

    " Toggle the over length highlighting based on if the match ID is set.
    if (w:overlength_match_id == -1) && (&textwidth != 0)
        let w:overlength_match_id = matchadd('OverLength', l:match_pattern)
    elseif w:overlength_match_id != -1
        call matchdelete(w:overlength_match_id)
        let w:overlength_match_id = -1
    endif
endfunction

" Function to set the default text width if it is not already specified.
function! SetDefaultTextWidth() abort
    if (&textwidth == 0) || (&filetype == "")
        let &l:textwidth = g:default_text_width
    endif
endfunction

" Performs a search and replace over the given range of lines (inclusive). To perform the search over the entire file,
" specify both range arguments as empty strings. The function minimizes the state modified, so the cursor position is
" preserved (if possible), no entries are added to the jump list or search history, and no highlighting occurs.
function! SearchAndReplace(regex, start_line, end_line) abort
    " Save the cursor position (and view) from before the search and replace operation.
    let l:current_view = winsaveview()

    " Form the full search and replace command with the range based on the arguments.
    if (a:start_line != '') || (a:end_line != '')
        let l:ranged_regex = a:start_line . ',' . a:end_line . 's' . a:regex
    else
        let l:ranged_regex = '%s' . a:regex
    endif

    " Perform the search and replace over the specified range and preserve the editor state.
    execute 'keepjumps keeppatterns ' . l:ranged_regex
    nohlsearch
    call winrestview(l:current_view)
endfunction

" Squashes any set of 3 or more consecutive blank lines into 2 blank lines.
function! SquashConsecutiveBlankLines(start_line, end_line) abort
    if b:enable_whitespace_cleanup
        let l:regex = ':\v' . '(\s*\n\s*\n\s*\n)(\s*\n)+' . ':\1' . ':e'
        call SearchAndReplace(l:regex, a:start_line, a:end_line)
    endif
endfunction

" Strips any blank lines from the end of file, deleting them.
function! StripTrailingLines() abort
    if b:enable_whitespace_cleanup
        let l:regex = ':\v' . '($\n\s*)+%$' . ':' . ':e'
        call SearchAndReplace(l:regex, '', '')
    endif
endfunction

" Strips the trailing whitespace the end of each line in the given range of lines (inclusive)
function! StripTrailingWhitespace(start_line, end_line) abort
    if b:enable_whitespace_cleanup
        let l:regex = ':\v' . '\s+$' . ':'. ':e'
        call SearchAndReplace(l:regex, a:start_line, a:end_line)
    endif
endfunction

" Performs an FZF file search from the project root directory if one exists, or from the current working directory if a
" root does not exist. The search is either performed over all files, or only files tracked in Git.
function! FzfFileSearch(git_files_only) abort
    " If only Git files are being searched then no path is required.
    if a:git_files_only
        GFiles
        return
    endif

    " Get the directory from which to perform the search from, falling back to the current working directory.
    let l:buffer_directory = expand('%:p:h', 1)
    try
        let l:search_directory = gutentags#get_project_root(l:buffer_directory)
    catch /^gutentags\:/
        let l:search_directory = l:buffer_directory
    endtry

    execute 'Files ' . l:search_directory
endfunction

"-----------------------------------------------------------------------------------------------------------------------
" Aliases and Commands
"-----------------------------------------------------------------------------------------------------------------------

" Allow for capital letters for common commands.
command! WQ wq
command! Wq wq
command! W w
command! Q q

" Override the default Netrw explore command command behavior to split right and below instead of left and above.
command! Sex Sexplore
command! Vex Vexplore!

" A command that allows a shell command to be executed silently. Normally, VIM puts itself in the background, then
" leaves you in the shell.
command! -bar -nargs=* Sh execute ':silent !' . <q-args> | execute ':redraw!'

" Provide short aliases for spawning a Bash shell.
command! -bar Sbash terminal ++noclose bash
command! -bar Vbash vertical terminal ++noclose bash
command! -bar Bash terminal ++noclose ++curwin bash

" Sets up a command to be run when the file is saved, and clears the command.
command! -bar -nargs=* OnWrite autocmd BufWritePost * !<args>
command! -bar -nargs=* OnWriteSilent autocmd BufWritePost * Sh <args>
command! -bar OnWriteClear autocmd! BufWritePost

" Alias the functions for whitespace cleanup as commands, so they can be more easily invoked.
command! -bar StripTrailingLines call StripTrailingLines()
command! -bar -range=% StripTrailingWhitespace call StripTrailingWhitespace(<line1>, <line2>)
command! -bar -range=% SquashConsecutiveBlankLines call SquashConsecutiveBlankLines(<line1>, <line2>)

" Format the currently open buffer using Python's JSON tool. This formats JSON files into a reasonable form.
command! FormatJSON %!python -m json.tool

"-----------------------------------------------------------------------------------------------------------------------
" Auto Commands
"-----------------------------------------------------------------------------------------------------------------------

" Set any buffer local variables to the values from their global variable counterparts. This sets it up so that
" buffer-local variables will inherit the value from the global variable.
augroup BufferLocalVariables
    autocmd!

    autocmd BufNewFile,BufReadPre * let b:enable_whitespace_cleanup = g:enable_whitespace_cleanup
augroup END

" Set reasonable defaults for the format options used by Vim for formatting text and comments in files. These set up
" options such as automatically wrapping text and comments that exceed the text width, among other things.
augroup FormatOptions
    autocmd!

    " Enable the wrapping of all text and comments when they exceed the text width.
    autocmd FileType * setlocal formatoptions+=c
    autocmd FileType * setlocal formatoptions-=l
    autocmd FileType * setlocal formatoptions+=t

    " Allow comment formatting with the 'gq' (formatting) shortcut, and remove comment leaders when joining lines.
    autocmd FileType * setlocal formatoptions+=q
    autocmd FileType * setlocal formatoptions+=j

    " Recognize numbered lists when formatting comments. This appropriately indents line continuations.
    autocmd FileType * setlocal formatoptions+=n

    " Disable the insertion of the comment leader when beginning a new line from normal mode with 'o' or 'O'.
    autocmd FileType * setlocal formatoptions-=o
augroup END

" Automatically save views and load them from file for each buffer. Views store editor context information about
" the file such as the cursor position and any folds. Note that the '?*' pattern is used to prevent empty file names
" from being matched, since views cause an error for empty windows and help pages.
augroup SaveViews
    autocmd!

    autocmd BufWinLeave ?* mkview
    autocmd BufWinEnter ?* silent loadview
augroup END

" Set Vim's text width property to a reasonable value. By default, if a file type plugin does not specify a text width,
" it is set to g:default_text_width.
augroup TextWidth
    autocmd!

    autocmd BufRead,BufNewFile * call SetDefaultTextWidth()
augroup END

" Clean up all extraneous whitespace in files. By default, all of the whitespace specified is cleaned up, but this can
" be disabled on a per-buffer basis by setting b:enable_whitespace_cleanup to 0.
augroup WhitespaceCleanup
    autocmd!

    autocmd BufWritePre * StripTrailingLines
    autocmd BufWritePre * StripTrailingWhitespace
    autocmd BufWritePre * SquashConsecutiveBlankLines
augroup END

"-----------------------------------------------------------------------------------------------------------------------
" Keyboard Shortcuts
"-----------------------------------------------------------------------------------------------------------------------

" Sets up the leader character to be a comma.
let mapleader = ","
let g:mapleader = ","

" A quick shortcut to duplicate a single line.
nnoremap Y yyp

" Shortcuts for saving the file and closing the file from insert mode.
inoremap <leader>w <ESC>:w<CR>i
inoremap <leader>q <ESC>:q<CR>
inoremap <leader>wq <ESC>:wq<CR>

" Provide versions of cut and delete in normal and visual modes that don't yank
" the elements. These disable yank by using the black hole register.
nnoremap <leader>d "_d
nnoremap <leader>D "_d
nnoremap <leader>c "_c
nnoremap <leader>C "_C
vnoremap <leader>d "_d
vnoremap <leader>D "_D
vnoremap <leader>c "_c
vnoremap <leader>C "_C

" Override the default behavior of the <Del> key, and prevent it from
" automatically yanking the text it deletes.
noremap <Del> "_x

" Override the default behavior of the paste command in visual mode. Instead
" of yanking the selection that was pasted over, simply delete it.
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction
vnoremap <silent> <expr> p <sid>Repl()
vnoremap <silent> <expr> P <sid>Repl()

" Set the F12 key as the shortcut for toggling paste mode.
set pastetoggle=<F12>

" Set the F2 key as the shortcut for toggling spell checking.
nnoremap <silent> <F2>  :setlocal spell! spelllang=en_us<CR>
inoremap <silent> <F2>  <C-o>:setlocal spell! spelllang=en_us<CR>

" Set the F3 key as shortcut for disabling highlighting of a search term until the next search.
nnoremap <silent> <F3>  :nohlsearch<CR>
inoremap <silent> <F3>  <C-o>:nohlsearch<CR>

" Set the F4 key as the shortcut for toggling if portions of a line over the buffer's text width are highlighted in red.
nnoremap <silent> <F4>  :call ToggleOverLength()<CR>
inoremap <silent> <F4> <C-o>:call ToggleOverLength()<CR>

" Window navigation shortcuts with Alt and the arrow keys.
map <silent> <A-Up> :wincmd k<CR>
map <silent> <A-Down> :wincmd j<CR>
map <silent> <A-Left> :wincmd h<CR>
map <silent> <A-Right> :wincmd l<CR>

" Add a shortcut to open a Git blame of the current buffer with the CTRL-W + b.
noremap <silent> <C-w>b :Gblame<CR>

" Use 'ga' as the key stroke shortcut for the easy align command. This creates shortcuts for normal and visual mode.
nmap ga <Plug>(EasyAlign)
vmap ga <Plug>(EasyAlign)

" Setup CTRL-P for all modes as a shortcut to search all the files in the current project (or from the current working
" directory if there is no project). Set CTRL-G CTRL-P to do the same, but only with files tracked under Git.
nnoremap <silent> <C-P>         :call FzfFileSearch(0)<CR>
inoremap <silent> <C-P>         <C-o>:call FzfFileSearch(0)<CR>
nnoremap <silent> <C-G><C-P>    :call FzfFileSearch(1)<CR>
inoremap <silent> <C-G><C-P>    <C-o>:call FzfFileSearch(0)<CR>

" Change the default behavior of the forward word search (*) and backward word search (#) to not jump to the next word
" immediately, but rather stay on the current word. Make sure the jump list is not modified.
nnoremap <silent> * :keepjumps normal! #*<CR>
nnoremap <silent> # :keepjumps normal! *#<CR>

"-----------------------------------------------------------------------------------------------------------------------
" Insert Mode Text Expansions (Macros)
"-----------------------------------------------------------------------------------------------------------------------

" Shortcuts to insert various date and time stamps, both in human-readable and short format (prefixed with s).
iabbrev <expr> _dts_    strftime("%A, %B %d, %Y at %r %Z")
iabbrev <expr> _mdts_   strftime("%c")
iabbrev <expr> _ds_     strftime("%A, B %d, %Y")
iabbrev <expr> _mds_    strftime("%a %b %d %y")

" Shortcut to insert a header guard.
function! HeaderGaurd() abort
    let basename = toupper(fnamemodify(bufname("%"), ":t:r"))
    let extension = toupper(fnamemodify(bufname("%"), ":e"))
    let gaurd = basename . "_" . extension . "_"
    return "#ifndef " . gaurd . "" .
           \"#define " . gaurd . "" .
           \"" .
           \"#endif /* " . gaurd . " */"
endfunction
iabbrev <expr> _hdgd <SID>HeaderGaurd()

" Shortcut to insert a generic comment header for various languages.
iabbrev <expr> _hd "" .
    \"/*----------------------------------------------------------------------------<CR>" .
    \"<CR>" .
    \"<BS>----------------------------------------------------------------------------*/<CR>"
iabbrev <expr> _shhd "" .
    \"#-------------------------------------------------------------------------------<CR>" .
    \"#<CR>" .
    \"#-------------------------------------------------------------------------------<CR>"
iabbrev <expr> _shhd_bold "" .
    \ "################################################################################<CR>" .
    \ "#<CR>" .
    \ "################################################################################<CR>"

" Shortcut to insert Doxygen doc string in a file.
iabbrev <expr> _dxhd "" .
    \"/**<CR>" .
    \"@file " . fnamemodify(bufname("%"), ":t") . "<CR>" .
    \"@author " . g:user_name . " <" . g:user_email . "><CR>" .
    \"@date " . strftime("%A, %B %d, %Y at %r %Z") . "<CR>" .
    \"<CR>" .
    \"FIXME: Insert a short description here<CR>" .
    \"<CR>" .
    \"FIXME: Insert a longer description here<CR>" .
    \"<BS>*/"

" Shortcut to insert a Doxygen doc string for functions.
iabbrev <expr> _dxf "" .
    \"/**<CR>" .
    \"FIXME: Insert a brief description here.<CR>" .
    \"<CR>" .
    \"FIXME: Insert a longer description here.<CR>" .
    \"<CR>" .
    \"@param[in] var_name FIXME: Description of input parameter `var_name`<CR>" .
    \"<CR>" .
    \"@param[out] var_name FIXME: Description of output parameter `var_name`<CR>" .
    \"<CR>" .
    \"@return FIXME: Description of function's return value<CR>" .
    \"<BS>*/"

" Shortcut to insert a Sphinx documentation string in a file.
iabbrev <expr> _sxhd "" .
    \"\"\"\"<CR>" .
    \fnamemodify(bufname("%"), ":t") . "<CR>" .
    \".. module:: " . fnamemodify(bufname("%"), ":t:r") . "<CR>" .
    \"<CR>" .
    \".. moduleauthor:: " . g:user_name . " <" . g:user_email . "><CR>" .
    \".. date:: " . strftime("%A, %B %d, %Y at %r %Z") . "<CR>" .
    \"<CR>" .
    \"FIXME: Insert Brief Description Here<CR>" .
    \"<CR>" .
    \"FIXME: Insert Longer Description Here<CR>" .
    \"\"\"\"<CR>"

"-----------------------------------------------------------------------------------------------------------------------
" Setup Operations
"-----------------------------------------------------------------------------------------------------------------------

" If the directories for the backup, swap, and undo files do not exist, then create them.
for s:directory in [&backupdir, &directory, &undodir, &viewdir]
    if empty(glob(s:directory))
        execute 'silent !mkdir --parents ' . s:directory
    endif
endfor

"-----------------------------------------------------------------------------------------------------------------------
" Local Machine-Specific Settings
"-----------------------------------------------------------------------------------------------------------------------

" Source any local, machine-specific settings if there is a Vim file for it.
let s:local_vimrc = g:vim_directory . '/vimrc_local.vim'
if !empty(glob(s:local_vimrc))
    execute 'source ' . s:local_vimrc
endif
