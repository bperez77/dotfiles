#-----------------------------------------------------------------------------------------------------------------------
#
# Mypy Configuration File
#
#
# Description:
#
#   This file contains the Mypy configuration used when linting Python code.
#
#   This file defines the default configuration and behavior when performing the static type analysis on the specified
#   Python programs. This determines the strictness of type checking.
#
#-----------------------------------------------------------------------------------------------------------------------


[mypy]

#-----------------------------------------------------------------------------------------------------------------------
# Import Discovery Options
#-----------------------------------------------------------------------------------------------------------------------

    # When encountering an import in a file that's being checked, follow the imported module and type check its contents
    # as well. This is necessary so that the types of imported functions, variables, etc. can be determined. If there
    # are any type errors in the imported files, they will be reported.
    follow_imports = normal


#-----------------------------------------------------------------------------------------------------------------------
# Untyped Definitions and Calls Options
#-----------------------------------------------------------------------------------------------------------------------

    # Disallow calling functions without type annotations from functions that have type annotations.
    disallow_untyped_calls = True

    # Disallow defining functions without or with incomplete type annotations.
    disallow_untyped_defs = True

    # Disallow defining functions with incomplete type annotations.
    disallow_incomplete_defs = True

    # Type check the interior of functions even if they are missing type annotations.
    check_untyped_defs = True


#-----------------------------------------------------------------------------------------------------------------------
# None and Optional Handling Options
#-----------------------------------------------------------------------------------------------------------------------

    # Do not implicitly make an argument's type optional if its default value is None. Instead, the user must manually
    # annotate the argument as `Optional[T]`.
    no_implicit_optional = True

    # Use strict optional checking, which means None is not treated as compatible with every type.
    strict_optional = True


#-----------------------------------------------------------------------------------------------------------------------
# Configuring Warnings Options
#-----------------------------------------------------------------------------------------------------------------------

    # Enable warnings when an expression is casted to its inferred type.
    warn_redundant_casts = True

    # Warn about unused Mypy suppressions (comments of the form `# type: ignore`).
    warn_unused_ignores = True

    # Warn when return statements are missing on some execution paths.
    warn_no_return = True

    # Warn when a function returns a value of type `Any` when its declared return type is not `Any`.
    warn_return_any = True

    # Warn when any code is inferred to be unreachable after preforming type analysis.
    warn_unreachable = True


#-----------------------------------------------------------------------------------------------------------------------
# Miscellaneous Strictness Flags
#-----------------------------------------------------------------------------------------------------------------------

    # Do not allow global and class variables to be untyped.
    allow_untyped_globals = False

    # Do not allow variables to be redefined with an arbitrary type. Assignments after the initial definition must match
    # the inferred or declared type.
    allow_redefinition = False

    # Do not allow equality, identity, or container (i.e. `in`) checks between non-overlapping types.
    strict_equality = True


#-----------------------------------------------------------------------------------------------------------------------
# Configuring Error Messages Options
#-----------------------------------------------------------------------------------------------------------------------

    # Prefix each error displayed in the output with the relevant context, which is the function name and other relevant
    # information to where the error occurred.
    show_error_context = True

    # Show the column numbers (character in the line) in the error messages.
    show_column_numbers = True

    # Show the error codes corresponding to the error messages (i.e. `no-any-return`). This allows users to easily
    # suppress the error message if they desire with the ignore comment (i.e. `# type: ignore[no-any-return]`).
    show_error_codes = True

    # Use pretty output for the error messages. This uses soft word wrap, the displaying of source code snippets, and
    # error location markers (^) to indicate where the error occurred in the source code.
    pretty = True

    # Show the error messages with terminal colors enabled.
    color_output = True

    # Display a short summary line after the error messages to indicate the total number of errors and warnings.
    error_summary = True


#-----------------------------------------------------------------------------------------------------------------------
# Miscellaneous Options
#-----------------------------------------------------------------------------------------------------------------------

    # Warn when per-module sections in this configuration file do not match any of the files processed.
    warn_unused_configs = True
