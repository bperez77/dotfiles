#-----------------------------------------------------------------------------------------------------------------------
#
# Git Configuration File
#
# Author:           Brandon Perez <bmperez@alumni.cmu.edu>
# Creation Date:    Wednesday, February 12, 2014 at 1:54:33 PM EDT
#
# This file is read and parsed whenever any Git command is run, and sets the global settings and command aliases.
#
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# General and Core Settings
#-----------------------------------------------------------------------------------------------------------------------

[user]

    # Set the default name and email address used in commits.
    name = Brandon Perez
    email = bmperez@alumni.cmu.edu

[core]

    # Use Vim as the default editor, which is utilized for things such as writing commit messages.
    editor = vim

    # Allow for parallel index preloading to speed up operations like Diff. Good for filesystems with poor caching.
    preloadIndex = true

    # Convert newline characters to this machine's locale's line endings, but keep the original when pushing changes to
    # the remote repository. This aids with smooth interoperability between Linux and Windows.
    autocrlf = input

    # Set common whitespace problems to be noticed for commands such as git diff and git apply. Detect extraneous
    # whitespace at the end of a line, extra lines at the end of a file, space before tab characters, and when tab
    # characters are used for indentiation as errors. Also, set the default tabwidth to 4.
    whitespace = blank-at-eol,blank-at-eof,space-before-tab,tab-in-indent,tabwidth=4

[color]

    # Always use colors for commands (e.g. Grep, Diff, etc.), even if the output is not to a terminal. This means colors
    # codes will be outputted when piped to another command, but also when writing to a file.
    ui = always

    # Override the default color settings for Diff. Don't display color codes if the output is not a terminal. This is
    # important for creating patch files with Diff, as color codes will cause issues if they are put in the patch file.
    diff = true

#-----------------------------------------------------------------------------------------------------------------------
# Command Settings
#-----------------------------------------------------------------------------------------------------------------------

[blame]

    # Use relative date format (e.g. 2 days ago) by default when using Blame.
    date = relative

[commit]

    # In the generated commit message, show the diff of the changes that are going to be committed and the diff of
    # changes that are not going to be committed (i.e. unstaged changes).
    verbose = 2

[diff]

    # Replaces the standard "a/" and "b/" prefix pair for Diff with prefixes that represent what is being compared. For
    # example, a plain diff compares the (i)ndex and (w)ork tree.
    mnemonicPrefix = true

    # The number of files to consider when performing copy and rename detection for diffs. This is set to the largest
    # integer to be a near-unlimited size.
    renameLimit = 2147483647

    # In addition to detecting file renames, also detect file copies when running Diff.
    renames = copies

    # Set the default visual/GUI diff tool to be Meld. This is used by the difftool command.
    tool = meld

[grep]

    # Display line numbers by default with the matches when using Grep.
    lineNumber = true

    # Use the maximum number of useful worker threads when performing a Grep.
    threads = 0

[filter "lfs"]

    # Setup Git large file storage (LFS) as a file filter. Git LFS is used to handle the storage of large files,
    # particularity binaries. Setup the clean, smudge, and process aliases for the filter driver.
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process

    # Indicates that the filter must always succeed. Any failure means the operation must be aborted.
    required = true

[log]

    # Use a more human-readable custom date format for Git log messages. This is displayed as "Weekday, Month, Day, Year
    # at Hour:Minutes:Second AM|PM Timezone".
    date = "format:%A, %B %d, %Y at %r %Z"

    # Include commit that pertain to the file before it was renamed by default when using git log.
    follow = true

[push]

    # If no refspec is given, then push the local branch to the upstream branch on the remote that it is set to track.
    # Additionally, this enforces that the name of the local and remote branches must match.
    default = simple

[status]

    # Include a summary of all submodules in the repository by default in the information displayed by git status.
    submoduleSummary = true

#-----------------------------------------------------------------------------------------------------------------------
# Git Command Aliases
#-----------------------------------------------------------------------------------------------------------------------

[alias]

    # Checks that the Gitignore file is properly configured. This command will print out any files that are tracked by
    # Git, but are listed as being a file that should be ignored by the Gitignore file.
    check-gitignore = ls-files -i --exclude-standard

    # Update the committer and author timestamps of the most recent commit to the current time.
    commit-update-now = !GIT_COMMITTER_DATE="\"`date`\"" git commit --amend --date "\"`date`\""

    # List all of the currently configured Git aliases available to the user.
    ls-aliases = config --get-regexp '^alias\\.'

    # Lists all branches in the repository by the last time a commit was pushed to the branch. A terse summary of each
    # commit is displayed and formatted. Assumes that the remote name is the default of 'origin'.
    recent-branches = for-each-ref --sort=committerdate --format='  %(color:cyan)%(refname:strip=3)%(color:reset) - %(color:bold)%(color:yellow)%(committerdate:relative)%(color:reset) (%(color:green)%(authorname)%(color:reset)) (%(contents:lines=1))' refs/remotes/origin

    # Same as the `recent-branches` alias, except that the branches are listed in descending order.
    recent-branches-desc = !git recent-branches --sort=-committerdate

    # Prune any branches that have been deleted from the remote, deleting the local copy of the remote branch. This is
    # useful becuase it reduces the number of available options when tab completing branch names.
    prune-branches = fetch --prune --all

    # Pull changes from the remote and rebase the local branch on top of them. Any local, unpushed changes will appear
    # after the remote's commits, and no merge commit will be generated. Keep any local merge commits during the rebase.
    pullr = pull --rebase=preserve

    # Show the Git history with a summary of changes to each file. This is the number of lines added and/or removed.
    slog = log --stat

    # Show an abbreviated version of the Git history with the summary of changes to each file. This only shows the
    # commit hash, author, and the first line of each commit, along with the change summary.
    sslog = log --stat --pretty=short

    # SHow the Git history is a visualized graph/tree format that displays the underlying structure of the dependencies
    # between commits. This is useful for showing merges, such as branhces that have been merged into the current one.
    tree = log --graph --decorate --pretty=oneline --abbrev-commit

#-----------------------------------------------------------------------------------------------------------------------
# Local Machine-Specific Settings
#----------------------------------------------------------------------------------------------------------------------

[include]

    # Include any local, machine-specific settings if there's a Git config file for it.
    path = .gitconfig_local
