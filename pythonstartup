#-----------------------------------------------------------------------------------------------------------------------
#
# Python Startup File
#
# Author:           Brandon Perez <bmperez@alumni.cmu.edu>
# Creation Date:    Tuesday, February 16, 2016 at 11:19:26 AM EDT
#
# Description:
#   This file is executed whenever an interactive Python session starts up, and it sets up persistent command history,
#   tab completion, and default imported modules for the session.
#
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Default Modules
#-----------------------------------------------------------------------------------------------------------------------

# Import the Automatic Imports module so it's available in the interpreter, if it is installed. This module lazily
# imports all available Python modules. The modules are available, but the actual importing doesn't happen until the
# module is used in the interpreter. This lazy importing is also recursive. This should come before any other imports.
try:
    from autoimp import *

    # Add additional aliases for module names other than NumPy which is already available.
    if 'tensorflow' in globals():
        tf = tensorflow
except ImportError:
    print('Unable to import "autoimp" module. Run `python -m pip install autoimp` to install it.')

# Import the See module so it's available in interpreter, if it is installed. See provides an improved version of the
# Dir function, for listing the members of objects.
try:
    from see import see
except ImportError:
    print('Unable to import "see" module. Run `python -m pip install see` to install it.')

# Import the various container types and iteration tools without their module names.
from collections import *
from itertools import *

# Import the Path module without the leading OS module.
from os import path

#-----------------------------------------------------------------------------------------------------------------------
# Readline Settings
#-----------------------------------------------------------------------------------------------------------------------

# The history entry that was selected by the reverse history search, to be displayed on the subsequent line.
_SELECTED_HISTORY_ENTRY = ''

def _setup_readline():
    """Sets up tab completion and persistent command history for the interactive session."""

    # The Readline library is only supported on Linux and Mac systems.
    import platform
    if platform.system().lower() != 'linux':
        return

    # General Imports
    import atexit
    from os import path

    # Readline Imports
    import readline
    import rlcompleter

    # Enable tab completion to be used in the Python interpreter.
    readline.parse_and_bind('tab: complete')

    # Set the persistent command history to be unlimited in size.
    readline.set_history_length(-1)

    # Read the contents of the Inputrc initialization file to get the standard Readline settings.
    inputrc_path = path.join(path.expanduser('~'), '.inputrc')
    readline.read_init_file(inputrc_path)

    # Read the contents of the Python history file if one currently exists to get the command history.
    history_path = path.join(path.expanduser('~'), '.python_history')
    if path.exists(history_path):
        readline.read_history_file(history_path)

    # When the interpreter exits, write the new history to the history file to enable persistent command history. Note
    # that this also includes the history that was read from the file, so this is effectively an append operation.
    atexit.register(readline.write_history_file, history_path)

    # Replace the standard reverse history search with a version that uses the FZF program. This works by invoking a
    # Python function to do the search, then using another function for the pre-input hook to place the selected entry
    # on the next prompt line.
    readline.parse_and_bind(r'"\C-r": "\C-e\C-u_fzf_history_search()\C-m"')
    readline.set_pre_input_hook(_readline_pre_input_hook)

def _fzf_history_search():
    """Perform a search over the Python command history using the FZF program (a fuzzy finder).

    This function is triggered when Ctrl-R is typed by the user. After the search is complete, this function updates a
    global variable that is utilized by the pre-input hook function to place the selected history on the next prompt
    line. This is required because there is no way to edit the current line buffer natively using Python.
    """

    # General Imports
    import os
    import shlex
    import subprocess

    # Readline Imports
    import readline

    # Declare the global variables accessed by this function.
    global _SELECTED_HISTORY_ENTRY

    # Remove this function call from the Python command history so that it doesn't pollute the history.
    history_index = readline.get_current_history_length() - 1
    readline.remove_history_item(history_index)

    # Read the entire history into a string.
    history_generator = (readline.get_history_item(i+1) for i in range(readline.get_current_history_length()))
    history_entries = '\n'.join(history_generator)

    # Source the FZF CTRL-R and default options and combine them with standard options to form the FZF options.
    fzf_ctrl_r_opts = os.getenv('FZF_CTRL_R_OPTS', default='')
    fzf_default_opts = os.getenv('FZF_DEFAULT_OPTS', default='')
    fzf_options = (f'--height 40% {fzf_default_opts} --tac --sync --tiebreak=index --bind=ctrl-r:toggle-sort'
            f' {fzf_ctrl_r_opts} --multi')

    # Run FZF to perform a fuzzy search over the history entries, passing the options in the environment variable.
    fzf_env = os.environ.copy()
    fzf_env['FZF_DEFAULT_OPTS'] = fzf_options
    process = subprocess.run(['fzf'], input=history_entries, stdout=subprocess.PIPE, env=fzf_env, encoding='utf-8')

    # Remove the final newline from the input returned by the program, so the cursor is on the final line.
    _SELECTED_HISTORY_ENTRY = process.stdout.rstrip('\n')

def _readline_pre_input_hook():
    """The pre-input hook for readline, which is called after the prompt is printed, but before user input is entered.

    This function simply inserts the selected history entry from the reverse history search, if one was performed on the
    previous line into the readline buffer. This is equivalent to if the user typed it themselves.
    """

    # Readline Imports
    import readline

    # Declare the global variables accessed by this function.
    global _SELECTED_HISTORY_ENTRY

    # Insert the selected history entry into the current line. If a search wasn't performed, the string is empty.
    readline.insert_text(_SELECTED_HISTORY_ENTRY)
    readline.redisplay()

    # Unconditionally reset the selected history entry to an empty string
    _SELECTED_HISTORY_ENTRY = ''

# Remove setup Readline function so it doesn't pollute the interactive session's namespace.
_setup_readline()
del _setup_readline

#-----------------------------------------------------------------------------------------------------------------------
# Prompt Settings
#-----------------------------------------------------------------------------------------------------------------------

def _get_color(color):
    """Gets the string code to represent the given color or modifier in the terminal by its name name (e.g green,
    magenta_background, normal, bold, etc). The returned string also has the appropriate delimiters so the color can be
    used in a Python prompt string."""

    # If Python is not being run on a Linux system, then the curses library is unavailable, so colors cannot be used.
    import platform
    if platform.system().lower() != 'linux':
        return ''

    # Otherwise, if the current terminal does not support color codes, then they cannot be used.
    import curses
    curses.setupterm()
    if curses.tigetstr('setaf') is None:
        return ''

    # Get ANSI color and modification codes for terminal text for the various colors and modifiers.
    get_color = lambda color: curses.tparm(curses.tigetstr('setaf'), color).decode('utf-8')
    get_background = lambda color: curses.tparm(curses.tigetstr('setab'), color).decode('utf-8')
    color_dict = {
            'green':                get_color(curses.COLOR_GREEN),
            'magenta_background':   get_background(curses.COLOR_MAGENTA),
            'normal':               curses.tigetstr('sgr0').decode('utf-8'),
            'yellow':               get_color(curses.COLOR_YELLOW),
    }

    # Return the string code for the given color. Note that the \001 and \002 delimiters tell Readline not
    # to count the characters towards the line length. This is necessary to wrap long lines properly.
    if color in color_dict:
        return f'\001{color_dict[color]}\002'
    else:
        raise KeyError(f'"{color}" is not a valid color or modifier.')

def _setup_prompt():
    """Modifies the PS1 and PS2 prompts used for the interactive session."""

    # General Imports
    import sys

    # Generate the color strings to use in the format strings.
    green = _get_color('green')
    magenta_background = _get_color('magenta_background')
    normal = _get_color('normal')
    yellow = _get_color('yellow')

    # Override the default prompt used in the interactive session, printed at the beginning of each line, and set it up
    # to display the version of Python being used.
    version = sys.version_info
    sys.ps1 = f'{green}[{yellow}Python-{version.major}.{version.minor}.{version.micro}{green}]>>> {normal}'

    # Override the default prompt used for line continuations, so that multi-line commands can be copied properly. Align
    # the lines with the PS1 prompt length, so function definitions look nice.
    ps1_len = len(f'[Python-{version.major}.{version.minor}.{version.micro}]>>> ')
    ps2_len = ps1_len - 1
    space = ' '
    sys.ps2 = f'{magenta_background}{space:<{ps2_len}}{normal} '

# Remove the setup prompt function so it doesn't pollute the interactive session's namespace.
_setup_prompt()
del _get_color, _setup_prompt

#-----------------------------------------------------------------------------------------------------------------------
# Defined Functions
#-----------------------------------------------------------------------------------------------------------------------

def see_filter(obj, pattern):
    """Filters the members of the given object using a wild card pattern or regex.

    This is a shorthand alias for see(obj).filter(pattern). Note that all members of a object begin with a '.'
    character, so this needs to be in the pattern. Regular expressions can be specified if the string begins with a
    forward-slash '/'.
    """

    return see(obj).filter(pattern)

def wildcard_import_file(python_file_path):
    """Emulates a wild card import of the Python file at the given path, if it exists.

    This follows the behavior of a wild card import (i.e. `from module import *`). If the module defines `__all__`, then
    only those names are imported. Otherwise, all names are imported which do not start with an underscore.
    """

    # General Imports
    import importlib
    from os import path

    # If there is no local Python startup file, then we do nothing.
    if not path.exists(python_file_path):
        return

    # Otherwise, dynamically import the module with import lib's facilities.
    (python_file_name, _) = path.splitext(path.basename(python_file_path))
    module_loader = importlib.machinery.SourceFileLoader(python_file_name, python_file_path)
    module_spec = importlib.util.spec_from_loader(module_loader.name, module_loader)
    module = importlib.util.module_from_spec(module_spec)
    module_spec.loader.exec_module(module)

    # Emulate a wild card import by importing all user-defined or specified variables into the global namespace. This is
    # either the `__all__` attribute, or all names that don't start with an underscore if `__all__` is not defined.
    default_import_variables = [name for name in module.__dict__.keys() if not name.startswith('_')]
    module_user_defined = getattr(module, '__all__', default_import_variables)
    module_variables = {name: getattr(module, name) for name in module_user_defined}
    globals().update(module_variables)

#-----------------------------------------------------------------------------------------------------------------------
# Machine-Local Settings
#-----------------------------------------------------------------------------------------------------------------------

def _import_local_startup():
    """Imports the local Python startup file, if one exists."""

    # General Imports
    from os import path

    local_pythonstartup_path = path.join(path.expanduser('~'), '.pythonstartup_local')
    wildcard_import_file(local_pythonstartup_path)

# Import the local Python startup file if one exists.
_import_local_startup()
del _import_local_startup
