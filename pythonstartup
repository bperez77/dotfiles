#-----------------------------------------------------------------------------------------------------------------------
#
# Python Startup File
#
# Author:           Brandon Perez <bmperez@alumni.cmu.edu>
# Creation Date:    Tuesday, February 16, 2016 at 11:19:26 AM EDT
#
# This file is executed whenever an interactive Python session starts up, and it sets up persistent command history, tab
# completion, and default imported modules for the session.
#
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Readline Settings
#-----------------------------------------------------------------------------------------------------------------------

def _setup_readline():
    """Sets up tab completion and persistent command history for the interactive session."""

    # General Imports
    import atexit
    from os import path

    # Readline Imports
    import readline
    import rlcompleter

    # Enable tab completion to be used in the Python interpreter.
    readline.parse_and_bind('tab: complete')

    # Set the persistent command history to be unlimited in size.
    readline.set_history_length(-1)

    # Read the contents of the Python history file if one currently exists to get the command history.
    history_path = path.join(path.expanduser('~'), '.python_history')
    if path.exists(history_path):
        readline.read_history_file(history_path)

    # When the interpreter exits, write the new history to the history file to enable persistent command history. Note
    # that this also includes the history that was read from the file, so this is effectively an append operation.
    atexit.register(readline.write_history_file, history_path)

# Remove setup Readline function so it doesn't pollute the interpreter's namespace
_setup_readline()
del _setup_readline

#-----------------------------------------------------------------------------------------------------------------------
# Default Modules and Defined Functions
#-----------------------------------------------------------------------------------------------------------------------

# Provides an improved version of the `dir` function, for listing the members of an object.
from see import see

def see_filter(obj, pattern):
    """Filters the members of the given object using a wildcard pattern or regex.

    This is a shorthand alias for see(obj).filter(pattern). Note that all members of a object begin with a '.'
    character, so this needs to be in the pattern. Regular expressions can be specified if the string begins with a
    forward-slash '/'.
    """

    return see(obj).filter(pattern)
